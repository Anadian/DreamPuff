"audio":{
	"enabled":{
		"type":"B!=true!|false" /*"Boolean: Enable audio."*/
	},
	"channels":{
		"type":"N!=2!|0-32" /*"Number: Max number of audio channels to use."*/
	},
	"samplerate":{
		"type":"N!=48000!|0-160_000" /*"Number: The sample rate, specified in Hz, to use for audio playback. 8000, 11025, 16000, 22050, 32000, 441000, 48000, or 96000 recommended."*/
	},
},
"debug":{
	"enabled":{
		"type":"B?=true?|false!" /*"Boolean: Enable debugging."*/
	},
	"verbosity":{
		"type":"N?=3!|5?|0-5;" /*"Number: Sets debug verbosity to the given unsigned integer: 0 being silent; 5 being maximum logging. Defaults to 3, if omitted, and 5, if specified without an argument."},,*/
	},
	"standard_output":{
		"type":"F!=STDOUT!" /*"Stream: STDOUT, STDERR, FILE, or /dev/null: oh, so many choices."*/
	},
	"standard_error":{
		"type":"F!=STDERR!" /*"Stream: Redirect stderr to the given stream; exempli gratia, STDOUT or a the name of a file."*/
	},
	"file":{
		"type":"B!=true!|false" /*"Boolean: Enable logging to a file."*/
	},
	"filename":{
		"type":"F!=cno.log!" /*"File name: The name of the file to log to."*/
	},
},
"":{
	"dialogs":{
		"type":"B!=true!|false" /*"Boolean: Sets whether to allow using external file dialogs."*/
	},
},
"":{
	"environment":{
		"type":"B!=true!|false" /*"Boolean: Sets whether to look for environment variables while initialising."*/
	},
},
"input":{
	"keyboard_mode":{
		"type":"D!=scancode!|keycode|text" /*"String: Sets the keyboard mode; in essence, how this software interprets keyboard input."*/
	},
	"text_mode":{
		"type":"D!=software|hardware!" /*"String: Sets whether to use the OS-defined (\"hardware\") keyboard or an internal, virtual (\"software\") keyboard for text input."*/
	},
	"mouse_relative_motion":{
		"type":"B!=true!|false" /*"Boolean: Accept the mouse's relative motion as an input source?"*/
	},
	"mouse_buttons":{
		"type":"B!=true!|false" /*"Boolean: Accept mouse button events as an input source?"*/
	},
	"mouse_wheel":{
		"type":"B!=true|false!" /*"Boolean: Accept mouse wheel events as a valid input source?"*/
	},
	"controller_engine":{
		"type":"D!=none|sdl-joystick!|sdl-controller|xinput|libusb|libgamepad" /*"String: |sdl-joystick: Use SDL\'s native joystick engine; works well with joysticks of all shapes and size"*/
	},
	"joystick_buttons":{
		"type":"B!=true!|false" /*"Boolean: Sets whether to accept joystick button events as an input source."*/
	},
	"joystick_axis":{
		"type":"B!=true!|false" /*"Boolean: Sets whether to accept joystick axis/analog events as a valid input source."*/
	},
	"joystick_hat":{
		"type":"B!=true!|false" /*"Boolean: Sets whether to accept joystick hat/pad events as a valid input source."*/
	},
	"joystick_ball":{
		"type":"B!=true!|false" /*"Boolean: Set whether to accept joystick ball events as an input source."*/
	},
	"joystick_axis_deadzone":{
		"type":"N!=800!|0-32_767" /*"Number: Sets the dead zone for all joysticks' axes; in essence, it's the minimum, absolute value an axis must possess (read) in to be used as an event."*/
	},
	"joystick_axis_peak":{
		"type":"N!=32_000!|0-32_767" /*"Number: Sets the peak for joysticks' axes; in essence, the value that should be considered max when reading an axis event."*/
	},
	"touch_mode":{
		"type":"D!=mouse!|touch" /*"String: Sets whether touch events should be interpreted has mouse clicks/motion or handled separately."*/
	},
},
{"::net:B!=true!|false;","Boolean: Enable networking functionality."},,
"sdl2":{
	"sdl2_enabled":{
		"type":"B!=true!|false" /*"Boolean: Allow the use of SDL2 for video/threads/input-backend API."*/
	},
	"sdl2_ttf_enabled":{
		"type":"B!=true!|false" /*"Boolean: Use, SDL2-extension, SDL2_TTF for font rendering."*/
	},
	"sdl2_gfx_enabled":{
		"type":"B!=true|false!" /*"Boolean: Allow the use, SDL2-extension, SDL2_GFX for software rendering of primitives and graphical effects."*/
	},
},
"sdl2 image":{
	"enabled":{
		"type":"B!=true!|false" /*"Boolean: Use, SDL2-extension, SDL2_Image for image loading."*/
	},
	"jpg":{
		"type":"B!=true|false!" /*"Boolean: Allow SDL2_Image to load JPEG files."*/
	},
	"png":{
		"type":"B!=true!|false" /*"Boolean: Allow SDL2_Image to load PNG files."*/
	},
	"tif":{
		"type":"B!=true|false!" /*"Boolean: Allow SDL2_Image to load TIF files."*/
	},
},
"sdl2 mixer":{
	"enabled":{
		"type":"B!=true!|false" /*"Boolean: Use, SDL2-extension, SDL2_Mixer for audio."*/
	},
	"flac":{
		"type":"B!=true|false!" /*"Boolean: Allow SDL2_Mixer to load FLAC audio files."*/
	},
	"mod":{
		"type":"B!=true|false!" /*"Boolean: Allow SDL2_Mixer to load MOD audio files."*/
	},
	"mp3":{
		"type":"B!=true|false!" /*"Boolean: Allow SDL2_Mixer to load MP3 audio files."*/
	},
	"ogg":{
		"type":"B!=true!|false" /*"Boolean: Allow SDL2_Mixer to load OGG audio files."*/
	},
},
"threads":{
	"enabled":{
		"type":"B!=true!|false" /*"Boolean: Allow the use of multithreading."*/
	},
	"max_threads":{
		"type":"N!=8!|0-8" /*"Number: Sets the maximum number of threads."*/
	},
	"logic":{
		"type":"B!=true!|false" /*"Boolean: Conduct logic on its own thread."*/
	},
	"fileio":{
		"type":"B!=true!|false" /*"Boolean: Conduct file IO on its own thread."*/
	},
	"network":{
		"type":"B!=true!|false" /*"Boolean: Conduct networking on its own thread."*/
	},
},
"video":{
	"enabled":{
		"type":"B!=true!|false" /*"Boolean: Enable video. (Opens a window; good for letting the air out.)"*/
	},
	"save_screenshot_bmp":{
		"type":"B!=true|false!" /*"Boolean: Save screenshots as bitmap image files."*/
	},
	"save_screenshot_png":{
		"type":"B!=true!|false" /*"Boolean: Save screenshots as PNG image files."*/
	},
	"driver":{
		"type":"N!=0!|0-8" /*"Number: Use the video driver, corresponding to the given number, for all video rendering."*/
	},
	"display":{
		"type":"N!=0!|0-8" /*"Number: Prefer the display, corresponding to give number, for creating windows and rendering fullscreen."*/
	},
	"displaymode":{
		"type":"N!=0!|0-16" /*"Number: Derive resolution, colour depth, and fullscreen rules from the display-mode which corresponds to the given number."*/
	},
	"x_offset":{
		"type":"I!=0!|-32787-32787" /*"Integer: The x position of the window in pixels."*/
	},
	"y_offset":{
		"type":"I!=0!|-32787-32787" /*"Integer: The y position of the window in pixels."*/
	},
	"width":{
		"type":"N!=640!|0-65_535" /*"Number: The width (horizontal size) of the window in pixels."*/
	},
	"height":{
		"type":"N!=480!|0-65_535" /*"Number: The height (vertical size) of the window in pixels."*/
	},
	"bits_per_pixel":{
		"type":"N!=32!|0-32" /*"Number: The colour depth of window/display in bits per pixel; not to be confused with bytes per pixel."*/
	},
	"exclusive_fullscreen":{
		"type":"B!=true|false!" /*"Boolean: Whether to prefer exclusive (\"real\") fullscreen (changing the desktop display mode to rendering resolution) over windowed/borderless (\"fake\") fullscreen."*/
	},
	"framerate":{
		"type":"N!=0!|0-120" /*"Number: How many times the render area should be refreshed (re-rendered) in a second (hertz); also commonly known as frames per second (FPS) or refresh rate. 0 will disable frame limiting altogether allowing the screen to be rendered as many times-a-second as it can (unlimited frames per second)."*/
	},
	"resizable":{
		"type":"B!=true!|false" /*"Boolean: Allows windows to be resized but pulling on their edge."*/
	},
	"borderless":{
		"type":"B!=true|false!" /*"Boolean: Makes windows borderless, essentially, removing the titlebar and the close/minimize buttons, showing only the rendering area."*/
	},
	"disable_screensaver":{
		"type":"B!=true!|false" /*"Boolean: Explicitly disable any screensavers while application has focus; useful if you using sdl-joystick."*/
	},
	"software_bitmaps":{
		"type":"B!=true|false!" /*"Boolean: Store images (bitmaps) in a software format (on CPU/RAM) as opposed to the default hardware format (GPU/vRAM)."*/
	},
	"software_effects":{
		"type":"B!=true|false!" /*"Boolean: Render graphical effects on the CPU (software style) as opposed to the, default, GPU (hardware-accelerated rendering)."*/
	},
	"software_render":{
		"type":"B!=true|false!" /*"Boolean: Store the render buffer in RAM (software-style CPU blitting) as opposed to the default, hardware-accelerated, texture format."*/
	},
},
"directories":{
	"portable":{
		"type":"B!=true!|false" /*"Boolean: Only use directory containing this executable/binary for storing and retrieving data: portable-style ./; as opposed to unix-style: /usr/local/* and ~/*."*/
	},
},
"directories":{
	"engine_data":{
		"type":"F!=./engine!" /*"Directory: The directory, in which, the engine data can be found."*/
	},
},
"directories":{
	"user_data":{
		"type":"F!=./data!" /*"Directory: The directory, in which, user data should be saved."*/
	},
},
